#!/bin/bash
#
# Having this anywhere in your $PATH (~/bin is recommended) will allow git to
# to see it and, and thus, you'll be able to do `git refresh`.
#
# TODO: it'd be nice to replace the for with a parallel call
#

#set -x
set -o errexit
set -o nounset
set -o pipefail

repo_has_remotes() {
    local target=$1
    local remotes_found

    remotes_found=$(grep '^\[remote' ${target}/.git/config 2>/dev/null | wc -l)
    [[ ${remotes_found} -gt 0 ]]
}

find_repos() {
    # list returned is relative to base_dir
    local base_dir=$1

    find ${base_dir} -name '.git' -type d -depth 2 \
        | awk -F/ '{print $5}'
}

on_branch_master() {
    local target=$1

    grep '^ref: refs/heads/master$' ${target}/.git/HEAD > /dev/null 2>&1

    [[ $? -eq 0 ]]
}

git_fetch() {
    local target=$1

    git --work-tree=${target} --git-dir=${target}/.git fetch 2>&1
}

git_pull() {
    local target=$1

    git --work-tree=${target} --git-dir=${target}/.git pull >/dev/null 2>&1
}

update_repo() {
    local repo_path=$1

    repo_has_remotes $repo_path || return 0

    fetch_output=$(git_fetch ${repo_path})

    if [[ "$fetch_output" != "" ]]
    then
        # found something to fetch
        echo "Processing ${repo_path}:"
        echo "${fetch_output}"

        if $(on_branch_master ${repo_path})
        then
            # try to update master
            $(git_pull ${repo_path}) &
        fi
    fi
}

main() {
    local base_dir=$1
    local fetch_output
    local num_jobs=10

    # export all previously defined functions so as to allow parallel to see them
    eval "$(declare -F | sed -e 's/-f /-fx /')"

    find_repos ${base_dir} | \
        parallel --jobs ${num_jobs} update_repo ${base_dir}/{}
}

main ${1:-~/Workspace}
